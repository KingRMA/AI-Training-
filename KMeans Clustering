import codecademylib3_seaborn
import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets
from copy import deepcopy

# Load iris dataset
iris = datasets.load_iris()

# Extract sepal length and width
samples = iris.data
x = samples[:, 0]
y = samples[:, 1]
sepal_length_width = np.array(list(zip(x, y)))

# Step 1: Place K random centroids
k = 3
centroids_x = np.random.uniform(min(x), max(x), size=k)
centroids_y = np.random.uniform(min(y), max(y), size=k)
centroids = np.array(list(zip(centroids_x, centroids_y)))

# Function to calculate Euclidean distance between two points
def distance(a, b):
    one = (a[0] - b[0]) ** 2
    two = (a[1] - b[1]) ** 2
    distance = (one + two) ** 0.5
    return distance

# To store the value of centroids when it updates
centroids_old = np.zeros(centroids.shape)

# Cluster labels (either 0, 1, or 2)
labels = np.zeros(len(samples))

# Initialize error
error = np.zeros(3)

# Repeat Steps 2 and 3 until convergence:

# Step 2: Assign samples to nearest centroid
while not np.array_equal(centroids, centroids_old):
    # Update old centroids
    centroids_old = deepcopy(centroids)

    for i in range(len(samples)):
        distances = [distance(sepal_length_width[i], centroid) for centroid in centroids]
        cluster = np.argmin(distances)
        labels[i] = cluster

    # Step 3: Update centroids
    for i in range(k):
        points = [sepal_length_width[j] for j in range(len(sepal_length_width)) if labels[j] == i]
        centroids[i] = np.mean(points, axis=0)

# Plotting
colors = ['r', 'g', 'b']
for i in range(k):
    points = np.array([sepal_length_width[j] for j in range(len(samples)) if labels[j] == i])
    plt.scatter(points[:, 0], points[:, 1], c=colors[i], alpha=0.5)

plt.scatter(centroids[:, 0], centroids[:, 1], marker='D', s=150, c='black')
plt.xlabel('Sepal Length')
plt.ylabel('Sepal Width')
plt.title('K-Means Clustering')
plt.show()
